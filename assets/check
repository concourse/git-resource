#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0

load_pubkey $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // ["."])[]' < $payload)" # those "'s are important
ignore_user=$(jq -r '.source.ignore_user // ""' < $payload)
ignore_paths="$(jq -r '":!" + (.source.ignore_paths // [])[]' < $payload)" # these ones too
tag_filter=$(jq -r '.source.tag_filter // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)
skip_ci_disabled=$(jq -r '.source.disable_ci_skip // false' < $payload)

configure_git_global "${git_config_payload}"

destination=$TMPDIR/git-resource-repo-cache

if [ -d $destination ]; then
  cd $destination
  git fetch
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone --single-branch $uri $branchflag $destination
  cd $destination
fi

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  init_commit=$(git rev-list --max-parents=0 HEAD)
  if [ "${ref}" = "${init_commit}" ]; then
    log_range="--reverse HEAD"
  else
    log_range="--reverse ${ref}~1..HEAD"
  fi
else
  log_range="-1"
fi

if [ "$paths" = "." ] && [ -z "$ignore_paths" ]; then
  paths_search=""
else
  paths_search="-- $paths $ignore_paths"
fi

ci_skip=""
if [ "$skip_ci_disabled" != "true" ]; then
  ci_skip="--grep \\[ci\\sskip\\] --grep \\[skip\\sci\\] --invert-grep"
fi

if [ -n "$tag_filter" ]; then
  {
    if [ -n "$ref" ]; then
      git tag --list "$tag_filter" --sort=creatordate --contains $ref
    else
      git tag --list "$tag_filter" --sort=creatordate | tail -1
    fi
  } | jq -R '.' | jq -s "map({ref: .})" >&3
else
  {
    set -f
    if [ -z "$ignore_user" ]; then
      git log $ci_skip --format='%H' --first-parent $log_range $paths_search
    else
      git log $ci_skip --format='%H %an' --first-parent $paths_search | grep -v "$ignore_user" | cut -f1 -d ' ' | head -1
    fi
    set +f
  } | jq -R '.' | jq -s "map({ref: .})" >&3
fi
