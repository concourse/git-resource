#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // ["."])[]' < $payload)" # those "'s are important
ignore_paths="$(jq -r '":!" + (.source.ignore_paths // [])[]' < $payload)" # these ones too
tag_filter=$(jq -r '.source.tag_filter // ""' < $payload)
pin_ref=$(jq -r '.source.pin_ref // ""' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)

destination=$TMPDIR/git-resource-repo-cache

if [ -d $destination ]; then
  cd $destination
  git fetch
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone --single-branch $uri $branchflag $destination
  cd $destination
fi

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  log_range="--reverse ${ref}..HEAD"
else
  log_range="-1"
fi

if [ $paths = '.' ] && [ -z $ignore_paths ]; then
  paths_search=""
else
  paths_search="-- $paths $ignore_paths"
fi

{
  if [ -n "$pin_ref" ]; then
    echo "$pin_ref"
  elif [ -n "$tag_filter" ]; then
    git describe --tags --abbrev=0 --match "$tag_filter"
  else
    git log --grep '\[ci skip\]' --invert-grep --format='%H' $log_range $paths_search
  fi
} | jq -R '.' | jq -s "map({ref: .})" >&3
