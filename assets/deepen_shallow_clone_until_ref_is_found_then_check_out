#!/bin/bash
# vim: set ft=sh

set -e

readonly max_depth=127

declare depth="$1"
readonly ref="$2"
readonly tagflag="$3"

declare total_depth="$depth"
declare depth_from_ref=$((depth - 1))

# A shallow clone may not contain the Git commit $ref:
# 1. The depth of the shallow clone is measured backwards from the latest
#    commit on the given head (master or branch), and in the meantime there may
#    have been more than $depth commits pushed on top of our $ref.
# 2. If there's a path filter (`paths`/`ignore_paths`), then there may be more
#    than $depth such commits pushed to the head (master or branch) on top of
#    $ref that are not affecting the filtered paths.
#
# In either case we try to deepen the shallow clone until we find $ref, reach
# the max depth of the repo, or give up after a given depth and resort to deep
# clone.

git_dir="$(git rev-parse --git-dir)"
readonly git_dir

while ! git checkout -f -q "$ref~$depth_from_ref" &>/dev/null; do
  # once the depth of a shallow clone reaches the max depth of the origin
  # repo, Git silenty turns it into a deep clone
  if [ ! -e "$git_dir"/shallow ]; then
    echo "Reached max depth of the origin repo while deepening the shallow clone, it's a deep clone now"
    break
  fi

  echo "Could not find ref ${ref}~${depth_from_ref} in a shallow clone of depth ${total_depth}"

  (( depth *= 2 ))

  if [ "$total_depth" -ge "$max_depth" ]; then
    echo "Reached depth threshold ${max_depth}, falling back to deep clone..."
    git fetch --unshallow origin $tagflag

    break
  fi

  echo "Deepening the shallow clone by an additional ${depth}..."
  git fetch --deepen "$depth" origin $tagflag
  (( total_depth += depth ))
done

git checkout -f -q "$ref"
