#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
branch_file=$(jq -r '.params.branch // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
repository=$(jq -r '.params.repository // ""' < $payload)
tag=$(jq -r '.params.tag // ""' < $payload)
tag_prefix=$(jq -r '.params.tag_prefix // ""' < $payload)
rebase=$(jq -r '.params.rebase // false' < $payload)
only_tag=$(jq -r '.params.only_tag // false' < $payload)
annotation_file=$(jq -r '.params.annotate // ""' < $payload)

configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri)"
  exit 1
fi

if [ -n "$branch_file" ] && [ -f "$branch_file" ]; then
  branch_name="$(cat $branch_file)"
elif [ -n "$branch" ]; then
  echo "Setting branch to $branch."
  echo "branch_file value is: $branch_file"
  ls -larth
  pwd
  ls -larth ../
  cat $branch_file
  branch_name=$branch
else
  echo "invalid payload (missing branch)"
  exit 1
fi

if [ -z "$repository" ]; then
  echo "invalid payload (missing repository)"
  exit 1
fi

cd $source

if [ -n "$tag" ] && [ ! -f "$tag" ]; then
  echo "tag file '$tag' does not exist"
  exit 1
fi

tag_name=""
if [ -n "$tag" ]; then
  tag_name="$(cat $tag)"
fi

annotate=""
if [ -n "$annotation_file" ]; then
  annotate=" -a -F $annotation_file"
fi

cd $repository

tag() {
  if [ -n "$tag_name" ]; then
    git tag -f "${tag_prefix}${tag_name}" $annotate
  fi
}

push_src_and_tags() {
  git push --tags push-target HEAD:refs/heads/$branch_name
}

push_tags() {
  git push --tags push-target
}

git remote add push-target $uri

if [ "$only_tag" = "true" ]; then
  tag
  push_tags
elif [ "$rebase" = "true" ]; then
  while true; do
    echo "rebasing..."

    git pull --rebase push-target $branch_name

    # oh god this is really the only way to do this
    result_file=$(mktemp $TMPDIR/git-result.XXXXXX)

    echo 0 > $result_file

    {
      tag 2>&1 && push_src_and_tags 2>&1 || {
        echo $? > $result_file
      }
    } | tee $TMPDIR/push-failure

    # despite what you may think, the embedded cat does not include the
    # trailing linebreak
    #
    # $() appears to trim it
    #
    # someone rewrite this please
    #
    # pull requests welcome
    if [ "$(cat $result_file)" = "0" ]; then
      echo "pushed"
      break
    fi

    # failed for reason other than non-fast-forward / fetch-first
    if ! grep -q '\[rejected\]\|\[remote rejected\].*cannot lock ref' $TMPDIR/push-failure; then
      echo "failed with non-rebase error"
      exit 1
    fi

    echo "rebasing and trying again..."
  done
else
  tag
  push_src_and_tags
fi

jq -n "{
  version: {ref: $(git rev-parse HEAD | jq -R .)},
  metadata: $(git_metadata)
}" >&3
